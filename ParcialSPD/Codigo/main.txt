// Funtanillas Belén 1B 
// Primer parcial SPD
/*
  Se nos pide armar un modelo de montacarga funcional como maqueta para un hospital. El
objetivo es que implementes un sistema que pueda recibir ordenes de subir, bajar o pausar
desde diferentes pisos y muestre el estado actual del montacargas en el display 7
segmentos.
*/

#define PIN_BOTON_SUBIR 2
#define PIN_BOTON_BAJAR 3
#define PIN_BOTON_DETENER 4
#define PIN_LED_VERDE 5
#define PIN_LED_ROJO 6
#define PIN_SEGMENTO_A 7
#define PIN_SEGMENTO_B 8
#define PIN_SEGMENTO_C 9
#define PIN_SEGMENTO_D 10
#define PIN_SEGMENTO_E 11
#define PIN_SEGMENTO_F 12
#define PIN_SEGMENTO_G 13
#define TIEMPO 3000


//variables de control
int pisoActual = 0;
bool enMovimiento = false;
bool enPausa = false;
int botonBajar;
int botonSubir;
int botonDetener;

int tiempo_actual;
int tiempo_anterior=0;

//configuro los pines como entrada y salida
void setup() {
  Serial.begin(9600);
  pinMode(PIN_BOTON_SUBIR, INPUT_PULLUP);
  pinMode(PIN_BOTON_BAJAR, INPUT_PULLUP);
  pinMode(PIN_BOTON_DETENER, INPUT_PULLUP);
  pinMode(PIN_LED_VERDE, OUTPUT);
  pinMode(PIN_LED_ROJO, OUTPUT);
  pinMode(PIN_SEGMENTO_A, OUTPUT);
  pinMode(PIN_SEGMENTO_B, OUTPUT);
  pinMode(PIN_SEGMENTO_C, OUTPUT);
  pinMode(PIN_SEGMENTO_D, OUTPUT);
  pinMode(PIN_SEGMENTO_E, OUTPUT);
  pinMode(PIN_SEGMENTO_F, OUTPUT);
  pinMode(PIN_SEGMENTO_G, OUTPUT);
}

void imprimir_piso(bool enMovimiento, bool enPausa);

void loop() {
   //capturo los estados de los botones
  botonSubir = digitalRead(PIN_BOTON_SUBIR);
  botonBajar = digitalRead(PIN_BOTON_BAJAR);
  botonDetener = digitalRead(PIN_BOTON_DETENER);
  	// si presionan el boton subir
    while (botonSubir == LOW) 
    {
      tiempo_actual= millis();
      digitalWrite(PIN_LED_VERDE, HIGH);
      digitalWrite(PIN_LED_ROJO, LOW);
      if( tiempo_actual - tiempo_anterior >= TIEMPO)
    {
      pisoActual++;
      enMovimiento = true;
      enPausa = false;
      actualizarDisplay(pisoActual);
      imprimir_piso(enMovimiento, enPausa);
      tiempo_anterior = tiempo_actual ;
     }
      if(digitalRead(PIN_BOTON_DETENER)== LOW || digitalRead(PIN_BOTON_BAJAR)== LOW)
      {
      	break;
      }
      if(pisoActual == 8){
        enMovimiento = false;
        enPausa = true;
        digitalWrite(PIN_LED_VERDE, LOW);
        digitalWrite(PIN_LED_ROJO, HIGH);
        imprimir_piso(enMovimiento, enPausa);
        break;
      }
    }
  	//si presionan el boton bajar
    while (botonBajar == LOW) 
    {
      tiempo_actual= millis();
      digitalWrite(PIN_LED_VERDE, HIGH);
      digitalWrite(PIN_LED_ROJO, LOW);
      if( tiempo_actual - tiempo_anterior >= TIEMPO)
    {
      pisoActual--;
      enMovimiento = true;
      enPausa = false;
      actualizarDisplay(pisoActual);
      imprimir_piso(enMovimiento, enPausa);
       tiempo_anterior = tiempo_actual ;
     }
      if(digitalRead(PIN_BOTON_DETENER)== LOW || digitalRead(PIN_BOTON_SUBIR)== LOW)
      {
      	break;
      }
      if(pisoActual == 0){
        enMovimiento = false;
        enPausa = true;
        digitalWrite(PIN_LED_VERDE, LOW);
        digitalWrite(PIN_LED_ROJO, HIGH);
        imprimir_piso(enMovimiento, enPausa);
        break;
      }
    }//si presionan el boton detener
  	if (botonDetener == LOW) 
    {
      enMovimiento = false;
      enPausa = true;
      digitalWrite(PIN_LED_VERDE, LOW);
      digitalWrite(PIN_LED_ROJO, HIGH);
      actualizarDisplay(pisoActual);
      imprimir_piso(enMovimiento, enPausa);
  	}

  //actualizo el estado del display
  actualizarDisplay(pisoActual);
}
//configuro los pisos
void actualizarDisplay(int piso) {
 switch (piso) {
    case 0:
      digitalWrite(PIN_SEGMENTO_A, HIGH);
      digitalWrite(PIN_SEGMENTO_B, HIGH);
      digitalWrite(PIN_SEGMENTO_C, HIGH);
      digitalWrite(PIN_SEGMENTO_D, HIGH);
      digitalWrite(PIN_SEGMENTO_E, HIGH);
      digitalWrite(PIN_SEGMENTO_F, HIGH);
      digitalWrite(PIN_SEGMENTO_G, LOW);
      break;
    case 1:
      digitalWrite(PIN_SEGMENTO_A, LOW);
      digitalWrite(PIN_SEGMENTO_B, HIGH);
      digitalWrite(PIN_SEGMENTO_C, HIGH);
      digitalWrite(PIN_SEGMENTO_D, LOW);
      digitalWrite(PIN_SEGMENTO_E, LOW);
      digitalWrite(PIN_SEGMENTO_F, LOW);
      digitalWrite(PIN_SEGMENTO_G, LOW);
      break;
    case 2:
      digitalWrite(PIN_SEGMENTO_A, HIGH);
      digitalWrite(PIN_SEGMENTO_B, HIGH);
      digitalWrite(PIN_SEGMENTO_C, LOW);
      digitalWrite(PIN_SEGMENTO_D, HIGH);
      digitalWrite(PIN_SEGMENTO_E, HIGH);
      digitalWrite(PIN_SEGMENTO_F, LOW);
      digitalWrite(PIN_SEGMENTO_G, HIGH);
      break;
    case 3:
      digitalWrite(PIN_SEGMENTO_A, HIGH);
      digitalWrite(PIN_SEGMENTO_B, HIGH);
      digitalWrite(PIN_SEGMENTO_C, HIGH);
      digitalWrite(PIN_SEGMENTO_D, HIGH);
      digitalWrite(PIN_SEGMENTO_E, LOW);
      digitalWrite(PIN_SEGMENTO_F, LOW);
      digitalWrite(PIN_SEGMENTO_G, HIGH);
      break;
    case 4:
      digitalWrite(PIN_SEGMENTO_A, LOW);
      digitalWrite(PIN_SEGMENTO_B, HIGH);
      digitalWrite(PIN_SEGMENTO_C, HIGH);
      digitalWrite(PIN_SEGMENTO_D, LOW);
      digitalWrite(PIN_SEGMENTO_E, LOW);
      digitalWrite(PIN_SEGMENTO_F, HIGH);
      digitalWrite(PIN_SEGMENTO_G, HIGH);
      break;
    case 5:
      digitalWrite(PIN_SEGMENTO_A, HIGH);
      digitalWrite(PIN_SEGMENTO_B, LOW);
      digitalWrite(PIN_SEGMENTO_C, HIGH);
      digitalWrite(PIN_SEGMENTO_D, HIGH);
      digitalWrite(PIN_SEGMENTO_E, LOW);
      digitalWrite(PIN_SEGMENTO_F, HIGH);
      digitalWrite(PIN_SEGMENTO_G, HIGH);
      break;
    case 6:
      digitalWrite(PIN_SEGMENTO_A, HIGH);
      digitalWrite(PIN_SEGMENTO_B, LOW);
      digitalWrite(PIN_SEGMENTO_C, HIGH);
      digitalWrite(PIN_SEGMENTO_D, HIGH);
      digitalWrite(PIN_SEGMENTO_E, HIGH);
      digitalWrite(PIN_SEGMENTO_F, HIGH);
      digitalWrite(PIN_SEGMENTO_G, HIGH);
      break;
    case 7:
      digitalWrite(PIN_SEGMENTO_A, HIGH);
      digitalWrite(PIN_SEGMENTO_B, HIGH);
      digitalWrite(PIN_SEGMENTO_C, HIGH);
      digitalWrite(PIN_SEGMENTO_D, LOW);
      digitalWrite(PIN_SEGMENTO_E, LOW);
      digitalWrite(PIN_SEGMENTO_F, LOW);
      digitalWrite(PIN_SEGMENTO_G, LOW);
      break;
    case 8:
      digitalWrite(PIN_SEGMENTO_A, HIGH);
      digitalWrite(PIN_SEGMENTO_B, HIGH);
      digitalWrite(PIN_SEGMENTO_C, HIGH);
      digitalWrite(PIN_SEGMENTO_D, HIGH);
      digitalWrite(PIN_SEGMENTO_E, HIGH);
      digitalWrite(PIN_SEGMENTO_F, HIGH);
      digitalWrite(PIN_SEGMENTO_G, HIGH);
      break;
    default:
      //estado desconocido
      digitalWrite(PIN_SEGMENTO_A, LOW);
      digitalWrite(PIN_SEGMENTO_B, LOW);
      digitalWrite(PIN_SEGMENTO_C, LOW);
      digitalWrite(PIN_SEGMENTO_D, LOW);
      digitalWrite(PIN_SEGMENTO_E, LOW);
      digitalWrite(PIN_SEGMENTO_F, LOW);
      digitalWrite(PIN_SEGMENTO_G, LOW);
      break;
  }
}//muestro en el serial el piso y su estado correspondiente
void imprimir_piso(bool enMovimiento, bool enPausa)
{
    Serial.print("Piso: ");
    Serial.print(pisoActual);
    Serial.print(" | ");
    if (enMovimiento) {
      Serial.println("En movimiento");
    } else if (enPausa) {
      Serial.println("En pausa");
    } else {
      Serial.println("Detenido");
    }

}
